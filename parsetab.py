
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCOMMArightASSIGNleftORleftANDleftEQNEleftGTLTGELEleftSUMSUBleftMULDIVMODrightNOTAND ASSIGN BOOLEAN COLON COMMA DIV ELSE ELSEIF EQ ERROR FALSE FLOAT FLOATNUMBER FOR FUNCTION GE GT ID IF IN INTEGER INTEGERNUMBER LCB LE LRB LSB LT MAIN MOD MUL NE NOT ON OR PRINT RCB RETURN RRB RSB SEMICOLON SUB SUM TRUE WHERE WHILEprogram : declist MAIN LRB RRB blockprogram : MAIN LRB RRB blockdeclist : decdeclist : declist decblock : LCB stmtlist RCBblock : LCB RCBdec : vardecdec : funcdecstmtlist : stmtstmtlist : stmtlist stmtstmt : blockstmt : vardecstmt : WHILE LRB expression RRB stmtstmt : ON LRB expression RRB LCB cases RCB SEMICOLONstmt : ON LRB expression RRB LCB  RCB SEMICOLONstmt : PRINT LRB ID RRB SEMICOLONstmt : RETURN expression SEMICOLONstmt : expression SEMICOLONstmt : FOR LRB expression SEMICOLON expression SEMICOLON expression RRB stmtstmt : FOR LRB ID IN ID RRB stmtstmt : IF LRB expression RRB iftokeniftoken : stmt blockiftoken : stmt elseiftokeniftoken : stmt ELSE stmtfuncdec : FUNCTION LRB elms RRB COLON type blockfuncdec : FUNCTION ID LRB elms RRB blocktype : INTEGERtype : FLOATtype : BOOLEANcase : WHERE factor COLON stmtlistcase : WHERE factor COLONcases : casecases : cases caseelm : IDelm : ID LSB expression RSBelm : ID ASSIGN expressionelms : elmelms : elms COMMA elmexpression : ID LSB expression RSB ASSIGN expressionvardec : elms COLON type SEMICOLONexplist : expressionexplist : explist COMMA expressionelseiftoken : ELSEIF LRB expression RRB stmtelseiftoken : elseiftoken ELSEIF LRB expression RRB stmtexpression : expression EQ expressionexpression : expression GT expressionexpression : expression GE expressionexpression : expression LT expressionexpression : expression LE expressionexpression : expression NE expressionexpression : ID LRB explist RRBexpression : ID LRB elms RRBexpression : ID LRB RRBexpression : SUB expressionexpression : NOT expressionexpression : expression SUM termexpression : expression SUB termexpression : expression AND termexpression : expression OR termexpression : termterm : term MUL factorterm : term DIV factorterm : term MOD factorterm : factorfactor : INTEGERNUMBERfactor : FLOATNUMBERfactor : TRUEfactor : FALSEfactor : LRB expression RRB'
    
_lr_action_items = {'MAIN':([0,2,4,5,6,12,44,68,101,112,125,],[3,11,-3,-7,-8,-4,-40,-6,-5,-26,-25,]),'FUNCTION':([0,2,4,5,6,12,44,68,101,112,125,],[8,8,-3,-7,-8,-4,-40,-6,-5,-26,-25,]),'ID':([0,2,4,5,6,8,12,15,16,18,19,28,31,32,33,43,44,47,48,50,51,52,53,54,55,67,68,69,70,71,77,101,102,103,104,105,106,107,109,110,112,115,121,125,126,128,132,133,134,136,138,141,147,148,149,150,151,155,158,160,161,162,163,164,165,167,168,170,171,172,173,],[9,9,-3,-7,-8,17,-4,9,9,29,29,9,29,29,29,76,-40,29,76,29,29,29,29,29,29,76,-6,-9,-11,-12,29,-5,-10,29,-18,29,119,29,123,29,-26,29,-17,-25,29,76,29,140,76,-13,-16,-21,29,76,-22,-23,76,-15,-20,-24,29,-14,76,76,29,76,-19,76,76,-43,-44,]),'$end':([1,42,66,68,101,],[0,-2,-1,-6,-5,]),'LRB':([3,8,11,17,18,19,29,31,32,33,43,44,47,48,50,51,52,53,54,55,56,57,58,59,63,64,65,67,68,69,70,71,72,74,75,76,77,78,79,101,102,103,104,105,107,109,110,115,121,123,126,128,132,134,136,138,141,146,147,148,149,150,151,152,155,158,159,160,161,162,163,164,165,167,168,170,171,172,173,],[13,16,20,28,31,31,48,31,31,31,31,-40,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-6,-9,-11,-12,103,105,106,48,31,109,110,-5,-10,31,-18,31,31,31,31,31,-17,48,31,31,31,31,-13,-16,-21,31,31,31,-22,-23,31,161,-15,-20,165,-24,31,-14,31,31,31,31,-19,31,31,-43,-44,]),'COLON':([7,9,10,26,34,35,36,37,38,39,40,45,49,61,62,76,84,87,88,89,90,91,92,93,94,95,96,97,98,99,100,114,116,131,135,156,],[14,-34,-37,-38,-60,-64,-65,-66,-67,-68,-36,80,-35,-54,-55,-34,-53,-45,-46,-47,-48,-49,-50,-56,-57,-58,-59,-69,-61,-62,-63,-51,-52,-35,-39,163,]),'COMMA':([7,9,10,26,27,34,35,36,37,38,39,40,46,49,61,62,76,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,114,116,127,131,135,],[15,-34,-37,-38,15,-60,-64,-65,-66,-67,-68,-36,15,-35,-54,-55,-34,115,-53,15,-41,-45,-46,-47,-48,-49,-50,-56,-57,-58,-59,-69,-61,-62,-63,-51,-52,-42,-35,-39,]),'RRB':([9,10,13,20,26,27,34,35,36,37,38,39,40,46,48,49,60,61,62,76,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,114,116,117,118,119,124,127,131,135,140,157,166,169,],[-34,-37,21,41,-38,45,-60,-64,-65,-66,-67,-68,-36,81,84,-35,97,-54,-55,-34,114,-53,116,-41,-45,-46,-47,-48,-49,-50,-56,-57,-58,-59,-69,-61,-62,-63,-51,-52,128,129,130,134,-42,-35,-39,148,164,170,171,]),'LSB':([9,29,76,123,],[18,47,107,47,]),'ASSIGN':([9,76,113,131,],[19,19,126,126,]),'INTEGER':([14,80,],[23,23,]),'FLOAT':([14,80,],[24,24,]),'BOOLEAN':([14,80,],[25,25,]),'SUB':([18,19,30,31,32,33,34,35,36,37,38,39,40,43,44,47,48,50,51,52,53,54,55,60,61,62,67,68,69,70,71,73,77,82,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,109,110,114,115,116,117,118,120,121,122,124,126,127,128,132,134,135,136,138,139,141,147,148,149,150,151,155,157,158,160,161,162,163,164,165,166,167,168,169,170,171,172,173,],[32,32,57,32,32,32,-60,-64,-65,-66,-67,-68,57,32,-40,32,32,32,32,32,32,32,32,57,-54,-55,32,-6,-9,-11,-12,57,32,57,-53,57,57,57,57,57,57,57,-56,-57,-58,-59,-69,-61,-62,-63,-5,-10,32,-18,32,32,57,32,32,-51,32,-52,57,57,57,-17,57,57,32,57,32,32,32,57,-13,-16,57,-21,32,32,-22,-23,32,-15,57,-20,-24,32,-14,32,32,32,57,32,-19,57,32,32,-43,-44,]),'NOT':([18,19,31,32,33,43,44,47,48,50,51,52,53,54,55,67,68,69,70,71,77,101,102,103,104,105,107,109,110,115,121,126,128,132,134,136,138,141,147,148,149,150,151,155,158,160,161,162,163,164,165,167,168,170,171,172,173,],[33,33,33,33,33,33,-40,33,33,33,33,33,33,33,33,33,-6,-9,-11,-12,33,-5,-10,33,-18,33,33,33,33,33,-17,33,33,33,33,-13,-16,-21,33,33,-22,-23,33,-15,-20,-24,33,-14,33,33,33,33,-19,33,33,-43,-44,]),'INTEGERNUMBER':([18,19,31,32,33,43,44,47,48,50,51,52,53,54,55,56,57,58,59,63,64,65,67,68,69,70,71,77,101,102,103,104,105,107,109,110,115,121,126,128,132,134,136,138,141,146,147,148,149,150,151,155,158,160,161,162,163,164,165,167,168,170,171,172,173,],[36,36,36,36,36,36,-40,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-6,-9,-11,-12,36,-5,-10,36,-18,36,36,36,36,36,-17,36,36,36,36,-13,-16,-21,36,36,36,-22,-23,36,-15,-20,-24,36,-14,36,36,36,36,-19,36,36,-43,-44,]),'FLOATNUMBER':([18,19,31,32,33,43,44,47,48,50,51,52,53,54,55,56,57,58,59,63,64,65,67,68,69,70,71,77,101,102,103,104,105,107,109,110,115,121,126,128,132,134,136,138,141,146,147,148,149,150,151,155,158,160,161,162,163,164,165,167,168,170,171,172,173,],[37,37,37,37,37,37,-40,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-6,-9,-11,-12,37,-5,-10,37,-18,37,37,37,37,37,-17,37,37,37,37,-13,-16,-21,37,37,37,-22,-23,37,-15,-20,-24,37,-14,37,37,37,37,-19,37,37,-43,-44,]),'TRUE':([18,19,31,32,33,43,44,47,48,50,51,52,53,54,55,56,57,58,59,63,64,65,67,68,69,70,71,77,101,102,103,104,105,107,109,110,115,121,126,128,132,134,136,138,141,146,147,148,149,150,151,155,158,160,161,162,163,164,165,167,168,170,171,172,173,],[38,38,38,38,38,38,-40,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-6,-9,-11,-12,38,-5,-10,38,-18,38,38,38,38,38,-17,38,38,38,38,-13,-16,-21,38,38,38,-22,-23,38,-15,-20,-24,38,-14,38,38,38,38,-19,38,38,-43,-44,]),'FALSE':([18,19,31,32,33,43,44,47,48,50,51,52,53,54,55,56,57,58,59,63,64,65,67,68,69,70,71,77,101,102,103,104,105,107,109,110,115,121,126,128,132,134,136,138,141,146,147,148,149,150,151,155,158,160,161,162,163,164,165,167,168,170,171,172,173,],[39,39,39,39,39,39,-40,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-6,-9,-11,-12,39,-5,-10,39,-18,39,39,39,39,39,-17,39,39,39,39,-13,-16,-21,39,39,39,-22,-23,39,-15,-20,-24,39,-14,39,39,39,39,-19,39,39,-43,-44,]),'LCB':([21,23,24,25,41,43,44,67,68,69,70,71,81,101,102,104,111,121,128,129,134,136,138,141,142,148,149,150,151,155,158,160,162,163,164,167,168,170,171,172,173,],[43,-27,-28,-29,43,43,-40,43,-6,-9,-11,-12,43,-5,-10,-18,43,-17,43,137,43,-13,-16,-21,43,43,-22,-23,43,-15,-20,-24,-14,43,43,43,-19,43,43,-43,-44,]),'SEMICOLON':([22,23,24,25,34,35,36,37,38,39,61,62,73,84,87,88,89,90,91,92,93,94,95,96,97,98,99,100,108,114,116,122,130,135,139,144,153,],[44,-27,-28,-29,-60,-64,-65,-66,-67,-68,-54,-55,104,-53,-45,-46,-47,-48,-49,-50,-56,-57,-58,-59,-69,-61,-62,-63,121,-51,-52,132,138,-39,147,155,162,]),'RSB':([30,34,35,36,37,38,39,61,62,82,84,87,88,89,90,91,92,93,94,95,96,97,98,99,100,114,116,120,135,],[49,-60,-64,-65,-66,-67,-68,-54,-55,113,-53,-45,-46,-47,-48,-49,-50,-56,-57,-58,-59,-69,-61,-62,-63,-51,-52,131,-39,]),'EQ':([30,34,35,36,37,38,39,40,60,61,62,73,82,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,108,114,116,117,118,120,122,124,127,135,139,157,166,169,],[50,-60,-64,-65,-66,-67,-68,50,50,-54,-55,50,50,-53,50,-45,-46,-47,-48,-49,-50,-56,-57,-58,-59,-69,-61,-62,-63,50,-51,-52,50,50,50,50,50,50,50,50,50,50,50,]),'GT':([30,34,35,36,37,38,39,40,60,61,62,73,82,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,108,114,116,117,118,120,122,124,127,135,139,157,166,169,],[51,-60,-64,-65,-66,-67,-68,51,51,-54,-55,51,51,-53,51,51,-46,-47,-48,-49,51,-56,-57,-58,-59,-69,-61,-62,-63,51,-51,-52,51,51,51,51,51,51,51,51,51,51,51,]),'GE':([30,34,35,36,37,38,39,40,60,61,62,73,82,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,108,114,116,117,118,120,122,124,127,135,139,157,166,169,],[52,-60,-64,-65,-66,-67,-68,52,52,-54,-55,52,52,-53,52,52,-46,-47,-48,-49,52,-56,-57,-58,-59,-69,-61,-62,-63,52,-51,-52,52,52,52,52,52,52,52,52,52,52,52,]),'LT':([30,34,35,36,37,38,39,40,60,61,62,73,82,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,108,114,116,117,118,120,122,124,127,135,139,157,166,169,],[53,-60,-64,-65,-66,-67,-68,53,53,-54,-55,53,53,-53,53,53,-46,-47,-48,-49,53,-56,-57,-58,-59,-69,-61,-62,-63,53,-51,-52,53,53,53,53,53,53,53,53,53,53,53,]),'LE':([30,34,35,36,37,38,39,40,60,61,62,73,82,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,108,114,116,117,118,120,122,124,127,135,139,157,166,169,],[54,-60,-64,-65,-66,-67,-68,54,54,-54,-55,54,54,-53,54,54,-46,-47,-48,-49,54,-56,-57,-58,-59,-69,-61,-62,-63,54,-51,-52,54,54,54,54,54,54,54,54,54,54,54,]),'NE':([30,34,35,36,37,38,39,40,60,61,62,73,82,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,108,114,116,117,118,120,122,124,127,135,139,157,166,169,],[55,-60,-64,-65,-66,-67,-68,55,55,-54,-55,55,55,-53,55,-45,-46,-47,-48,-49,-50,-56,-57,-58,-59,-69,-61,-62,-63,55,-51,-52,55,55,55,55,55,55,55,55,55,55,55,]),'SUM':([30,34,35,36,37,38,39,40,60,61,62,73,82,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,108,114,116,117,118,120,122,124,127,135,139,157,166,169,],[56,-60,-64,-65,-66,-67,-68,56,56,-54,-55,56,56,-53,56,56,56,56,56,56,56,-56,-57,-58,-59,-69,-61,-62,-63,56,-51,-52,56,56,56,56,56,56,56,56,56,56,56,]),'AND':([30,34,35,36,37,38,39,40,60,61,62,73,82,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,108,114,116,117,118,120,122,124,127,135,139,157,166,169,],[58,-60,-64,-65,-66,-67,-68,58,58,-54,-55,58,58,-53,58,-45,-46,-47,-48,-49,-50,-56,-57,-58,-59,-69,-61,-62,-63,58,-51,-52,58,58,58,58,58,58,58,58,58,58,58,]),'OR':([30,34,35,36,37,38,39,40,60,61,62,73,82,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,108,114,116,117,118,120,122,124,127,135,139,157,166,169,],[59,-60,-64,-65,-66,-67,-68,59,59,-54,-55,59,59,-53,59,-45,-46,-47,-48,-49,-50,-56,-57,-58,-59,-69,-61,-62,-63,59,-51,-52,59,59,59,59,59,59,59,59,59,59,59,]),'MUL':([34,35,36,37,38,39,93,94,95,96,97,98,99,100,],[63,-64,-65,-66,-67,-68,63,63,63,63,-69,-61,-62,-63,]),'DIV':([34,35,36,37,38,39,93,94,95,96,97,98,99,100,],[64,-64,-65,-66,-67,-68,64,64,64,64,-69,-61,-62,-63,]),'MOD':([34,35,36,37,38,39,93,94,95,96,97,98,99,100,],[65,-64,-65,-66,-67,-68,65,65,65,65,-69,-61,-62,-63,]),'RCB':([43,44,67,68,69,70,71,101,102,104,121,136,137,138,141,143,145,149,150,154,155,158,160,162,163,167,168,172,173,],[68,-40,101,-6,-9,-11,-12,-5,-10,-18,-17,-13,144,-16,-21,153,-32,-22,-23,-33,-15,-20,-24,-14,-31,-30,-19,-43,-44,]),'WHILE':([43,44,67,68,69,70,71,101,102,104,121,128,134,136,138,141,148,149,150,151,155,158,160,162,163,164,167,168,170,171,172,173,],[72,-40,72,-6,-9,-11,-12,-5,-10,-18,-17,72,72,-13,-16,-21,72,-22,-23,72,-15,-20,-24,-14,72,72,72,-19,72,72,-43,-44,]),'ON':([43,44,67,68,69,70,71,101,102,104,121,128,134,136,138,141,148,149,150,151,155,158,160,162,163,164,167,168,170,171,172,173,],[74,-40,74,-6,-9,-11,-12,-5,-10,-18,-17,74,74,-13,-16,-21,74,-22,-23,74,-15,-20,-24,-14,74,74,74,-19,74,74,-43,-44,]),'PRINT':([43,44,67,68,69,70,71,101,102,104,121,128,134,136,138,141,148,149,150,151,155,158,160,162,163,164,167,168,170,171,172,173,],[75,-40,75,-6,-9,-11,-12,-5,-10,-18,-17,75,75,-13,-16,-21,75,-22,-23,75,-15,-20,-24,-14,75,75,75,-19,75,75,-43,-44,]),'RETURN':([43,44,67,68,69,70,71,101,102,104,121,128,134,136,138,141,148,149,150,151,155,158,160,162,163,164,167,168,170,171,172,173,],[77,-40,77,-6,-9,-11,-12,-5,-10,-18,-17,77,77,-13,-16,-21,77,-22,-23,77,-15,-20,-24,-14,77,77,77,-19,77,77,-43,-44,]),'FOR':([43,44,67,68,69,70,71,101,102,104,121,128,134,136,138,141,148,149,150,151,155,158,160,162,163,164,167,168,170,171,172,173,],[78,-40,78,-6,-9,-11,-12,-5,-10,-18,-17,78,78,-13,-16,-21,78,-22,-23,78,-15,-20,-24,-14,78,78,78,-19,78,78,-43,-44,]),'IF':([43,44,67,68,69,70,71,101,102,104,121,128,134,136,138,141,148,149,150,151,155,158,160,162,163,164,167,168,170,171,172,173,],[79,-40,79,-6,-9,-11,-12,-5,-10,-18,-17,79,79,-13,-16,-21,79,-22,-23,79,-15,-20,-24,-14,79,79,79,-19,79,79,-43,-44,]),'ELSE':([44,68,70,71,101,104,121,136,138,141,142,149,150,155,158,160,162,168,172,173,],[-40,-6,-11,-12,-5,-18,-17,-13,-16,-21,151,-22,-23,-15,-20,-24,-14,-19,-43,-44,]),'ELSEIF':([44,68,70,71,101,104,121,136,138,141,142,149,150,155,158,160,162,168,172,173,],[-40,-6,-11,-12,-5,-18,-17,-13,-16,-21,152,-22,159,-15,-20,-24,-14,-19,-43,-44,]),'WHERE':([44,68,69,70,71,101,102,104,121,136,137,138,141,143,145,149,150,154,155,158,160,162,163,167,168,172,173,],[-40,-6,-9,-11,-12,-5,-10,-18,-17,-13,146,-16,-21,146,-32,-22,-23,-33,-15,-20,-24,-14,-31,-30,-19,-43,-44,]),'IN':([123,],[133,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declist':([0,],[2,]),'dec':([0,2,],[4,12,]),'vardec':([0,2,43,67,128,134,148,151,163,164,167,170,171,],[5,5,71,71,71,71,71,71,71,71,71,71,71,]),'funcdec':([0,2,],[6,6,]),'elms':([0,2,16,28,43,48,67,128,134,148,151,163,164,167,170,171,],[7,7,27,46,7,85,7,7,7,7,7,7,7,7,7,7,]),'elm':([0,2,15,16,28,43,48,67,128,134,148,151,163,164,167,170,171,],[10,10,26,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'type':([14,80,],[22,111,]),'expression':([18,19,31,32,33,43,47,48,50,51,52,53,54,55,67,77,103,105,107,109,110,115,126,128,132,134,147,148,151,161,163,164,165,167,170,171,],[30,40,60,61,62,73,82,86,87,88,89,90,91,92,73,108,117,118,120,122,124,127,135,73,139,73,157,73,73,166,73,73,169,73,73,73,]),'term':([18,19,31,32,33,43,47,48,50,51,52,53,54,55,56,57,58,59,67,77,103,105,107,109,110,115,126,128,132,134,147,148,151,161,163,164,165,167,170,171,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,93,94,95,96,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'factor':([18,19,31,32,33,43,47,48,50,51,52,53,54,55,56,57,58,59,63,64,65,67,77,103,105,107,109,110,115,126,128,132,134,146,147,148,151,161,163,164,165,167,170,171,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,98,99,100,35,35,35,35,35,35,35,35,35,35,35,35,156,35,35,35,35,35,35,35,35,35,35,]),'block':([21,41,43,67,81,111,128,134,142,148,151,163,164,167,170,171,],[42,66,70,70,112,125,70,70,149,70,70,70,70,70,70,70,]),'stmtlist':([43,163,],[67,167,]),'stmt':([43,67,128,134,148,151,163,164,167,170,171,],[69,102,136,142,158,160,69,168,102,172,173,]),'explist':([48,],[83,]),'iftoken':([134,],[141,]),'cases':([137,],[143,]),'case':([137,143,],[145,154,]),'elseiftoken':([142,],[150,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declist MAIN LRB RRB block','program',5,'p_program_a','m_parser.py',23),
  ('program -> MAIN LRB RRB block','program',4,'p_program_b','m_parser.py',28),
  ('declist -> dec','declist',1,'p_declist_dec','m_parser.py',34),
  ('declist -> declist dec','declist',2,'p_declist_declist_dec','m_parser.py',39),
  ('block -> LCB stmtlist RCB','block',3,'p_block','m_parser.py',45),
  ('block -> LCB RCB','block',2,'p_block_empty','m_parser.py',50),
  ('dec -> vardec','dec',1,'p_dec_vardec','m_parser.py',56),
  ('dec -> funcdec','dec',1,'p_dec_funcdec','m_parser.py',61),
  ('stmtlist -> stmt','stmtlist',1,'p_stmtlist_stmt','m_parser.py',66),
  ('stmtlist -> stmtlist stmt','stmtlist',2,'p_stmtlist_stmtlist','m_parser.py',75),
  ('stmt -> block','stmt',1,'p_stmt_block','m_parser.py',81),
  ('stmt -> vardec','stmt',1,'p_stmt_vardec','m_parser.py',86),
  ('stmt -> WHILE LRB expression RRB stmt','stmt',5,'p_stmt_while','m_parser.py',91),
  ('stmt -> ON LRB expression RRB LCB cases RCB SEMICOLON','stmt',8,'p_stmt_on_cases','m_parser.py',99),
  ('stmt -> ON LRB expression RRB LCB RCB SEMICOLON','stmt',7,'p_stmt_on_cases_emsilan','m_parser.py',107),
  ('stmt -> PRINT LRB ID RRB SEMICOLON','stmt',5,'p_stmt_print','m_parser.py',115),
  ('stmt -> RETURN expression SEMICOLON','stmt',3,'p_stmt_return_exp','m_parser.py',120),
  ('stmt -> expression SEMICOLON','stmt',2,'p_stmt_exp','m_parser.py',125),
  ('stmt -> FOR LRB expression SEMICOLON expression SEMICOLON expression RRB stmt','stmt',9,'p_stmt_for_exp','m_parser.py',132),
  ('stmt -> FOR LRB ID IN ID RRB stmt','stmt',7,'p_stmt_for_id','m_parser.py',140),
  ('stmt -> IF LRB expression RRB iftoken','stmt',5,'p_stmt_if_','m_parser.py',145),
  ('iftoken -> stmt block','iftoken',2,'p_iftoken_smt','m_parser.py',150),
  ('iftoken -> stmt elseiftoken','iftoken',2,'p_iftoken_smt_elseiflist','m_parser.py',155),
  ('iftoken -> stmt ELSE stmt','iftoken',3,'p_iftoken_smt_else','m_parser.py',160),
  ('funcdec -> FUNCTION LRB elms RRB COLON type block','funcdec',7,'p_funcdec_type','m_parser.py',193),
  ('funcdec -> FUNCTION ID LRB elms RRB block','funcdec',6,'p_funcdec_id','m_parser.py',201),
  ('type -> INTEGER','type',1,'p_type_int','m_parser.py',210),
  ('type -> FLOAT','type',1,'p_type_float','m_parser.py',215),
  ('type -> BOOLEAN','type',1,'p_type_bool','m_parser.py',220),
  ('case -> WHERE factor COLON stmtlist','case',4,'p_case','m_parser.py',226),
  ('case -> WHERE factor COLON','case',3,'p_case_empty_stmtlist','m_parser.py',230),
  ('cases -> case','cases',1,'p_cases_case','m_parser.py',234),
  ('cases -> cases case','cases',2,'p_cases_cases','m_parser.py',239),
  ('elm -> ID','elm',1,'p_elm_id','m_parser.py',315),
  ('elm -> ID LSB expression RSB','elm',4,'p_elm_id_sb','m_parser.py',320),
  ('elm -> ID ASSIGN expression','elm',3,'p_elm_id_assign','m_parser.py',324),
  ('elms -> elm','elms',1,'p_elms_elm','m_parser.py',327),
  ('elms -> elms COMMA elm','elms',3,'p_elms_elms_elm','m_parser.py',330),
  ('expression -> ID LSB expression RSB ASSIGN expression','expression',6,'p_exp_id_assign','m_parser.py',339),
  ('vardec -> elms COLON type SEMICOLON','vardec',4,'p_vardec','m_parser.py',342),
  ('explist -> expression','explist',1,'p_explist_exp','m_parser.py',357),
  ('explist -> explist COMMA expression','explist',3,'p_explist_explist','m_parser.py',362),
  ('elseiftoken -> ELSEIF LRB expression RRB stmt','elseiftoken',5,'p_elseiflist_elseif','m_parser.py',368),
  ('elseiftoken -> elseiftoken ELSEIF LRB expression RRB stmt','elseiftoken',6,'p_elseiflist_elseiflist','m_parser.py',376),
  ('expression -> expression EQ expression','expression',3,'p_relop_exp_eq','m_parser.py',386),
  ('expression -> expression GT expression','expression',3,'p_relop_exp_gt','m_parser.py',391),
  ('expression -> expression GE expression','expression',3,'p_relop_exp_ge','m_parser.py',396),
  ('expression -> expression LT expression','expression',3,'p_relop_exp_lt','m_parser.py',401),
  ('expression -> expression LE expression','expression',3,'p_relop_exp_le','m_parser.py',406),
  ('expression -> expression NE expression','expression',3,'p_relop_exp_ne','m_parser.py',411),
  ('expression -> ID LRB explist RRB','expression',4,'p_exp_id_bracket_exp','m_parser.py',427),
  ('expression -> ID LRB elms RRB','expression',4,'p_exp_id_bracket_elms','m_parser.py',432),
  ('expression -> ID LRB RRB','expression',3,'p_exp_id__bracket','m_parser.py',437),
  ('expression -> SUB expression','expression',2,'p_exp_minus_exp','m_parser.py',442),
  ('expression -> NOT expression','expression',2,'p_exp_not_exp','m_parser.py',452),
  ('expression -> expression SUM term','expression',3,'p_expression_plus','m_parser.py',457),
  ('expression -> expression SUB term','expression',3,'p_expression_minus','m_parser.py',462),
  ('expression -> expression AND term','expression',3,'p_expression_and','m_parser.py',467),
  ('expression -> expression OR term','expression',3,'p_expression_or','m_parser.py',472),
  ('expression -> term','expression',1,'p_expression_term','m_parser.py',477),
  ('term -> term MUL factor','term',3,'p_term_times','m_parser.py',482),
  ('term -> term DIV factor','term',3,'p_term_div','m_parser.py',487),
  ('term -> term MOD factor','term',3,'p_term_MOD','m_parser.py',492),
  ('term -> factor','term',1,'p_term_factor','m_parser.py',497),
  ('factor -> INTEGERNUMBER','factor',1,'p_factor_num','m_parser.py',502),
  ('factor -> FLOATNUMBER','factor',1,'p_factor_float','m_parser.py',507),
  ('factor -> TRUE','factor',1,'p_factor_true','m_parser.py',512),
  ('factor -> FALSE','factor',1,'p_factor_false','m_parser.py',517),
  ('factor -> LRB expression RRB','factor',3,'p_factor_expr','m_parser.py',522),
]
